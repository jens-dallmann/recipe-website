apply plugin: 'war'
apply plugin: 'com.bmuschko.tomcat'
apply plugin: 'com.bmuschko.tomcat-base'

import org.apache.tools.ant.filters.ReplaceTokens

if (System.getProperty('env') != null && System.getProperty('env') == 'prod') {
    apply from: 'gradle/production.gradle'
}  else {
    apply from: 'gradle/development.gradle'
}

repositories {
    mavenCentral()
}
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.0'
    }
}
tasks.withType(JavaCompile) {
    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"
}

dependencies {
    providedCompile 'javax.servlet:servlet-api:2.5'
    compile 'org.springframework:spring-webmvc:4.1.2.RELEASE'
    runtime 'javax.servlet:jstl:1.1.2'
    def tomcatVersion = '7.0.11'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
    compile 'org.slf4j:slf4j-api:1.7.7'
    runtime 'ch.qos.logback:logback-core:1.1.2'
    runtime 'ch.qos.logback:logback-classic:1.1.2'
    compile 'com.fasterxml.jackson.core:jackson-core:2.4.3'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.4.3'
    compile 'javax.servlet:servlet-api:2.5'
    compile 'javax.servlet:jstl:1.2'
}

task "create-dirs" << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}

tomcat {
    httpPort = 8090
    ajpPort = 8011
    stopPort = 8012
}
processResources {
    inputs.properties( System.getProperties() )
    from(sourceSets.main.resources.srcDirs)
    {
       include '**/*.properties'
        filter(ReplaceTokens,
                tokens: ['$':'={'], beginToken : '=', endToken : '{')
        filter(ReplaceTokens,
                tokens: [System.getProperties()], beginToken : '{', endToken : '}')
    }
    from(sourceSets.main.resources.srcDirs)
            { exclude '**/*.properties' }
}
task tomcatDebug {
    // Create a new task tomcatDebug, add a description and add it to the same group as tomcatRun
    description "Starting Tomcat with debugger enabled on port 5008."
    group "web application"
} << {

    org.gradle.tooling.ProjectConnection conn = org.gradle.tooling.GradleConnector.newConnector()
            .forProjectDirectory(new File("."))
            .connect();

    try {

        org.gradle.tooling.model.build.BuildEnvironment env = conn.getModel(org.gradle.tooling.model.build.BuildEnvironment.class)
        org.gradle.tooling.BuildLauncher build = conn.newBuild();

        build.forTasks("tomcatRun")
        // Enable debug via jvm arguments and append JVM arguments of the currently running vm (except -D).
        build.setJvmArguments("-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8001", *env.java.jvmArguments)

        // Run tomcatRun in the new JVM with debug parameters
        build.run()

    } finally {
        conn.close();
    }
}